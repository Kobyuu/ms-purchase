services:
  # Traefik - Proxy inverso y balanceador de carga
  traefik:
    image: traefik:v2.9
    container_name: ms-purchase_traefik
    command:
      - "--api.insecure=true"  # Activa el panel de control de Traefik (opcional)
      - "--providers.docker=true"  # Habilita el proveedor de Docker
      - "--entrypoints.web.address=:80"  # Expone el puerto 80 para HTTP
    ports:
      - "90:80"   # Puerto para HTTP
      - "9080:8080"  # Puerto para el panel de Traefik (opcional)
    networks:
      - microservicios-red
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"  # Permite que Traefik lea la configuración de Docker

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: ms-purchase_postgres
    environment:
      POSTGRES_DB: ms-purchase
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
    ports:
      - "9432:5432"
    volumes:
      - postgres_data_purchase:/var/lib/postgresql/data
    networks:
      - microservicios-red
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5

  db-init:
    image: postgres:15
    container_name: ms-purchase_db-init
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      psql -U postgres -h postgres -c "CREATE DATABASE \"ms-purchase\";"
    environment:
      PGPASSWORD: 1234
    networks:
      - microservicios-red

  # Redis
  redis:
    image: redis:7
    container_name: ms-purchase_redis
    ports:
      - "10379:6379"
    networks:
      - microservicios-red

  # Node.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ms-purchase_app
    ports:
      - "5004:4004"
    environment:
      DATABASE_URL: postgres://postgres:1234@postgres:5432/ms-purchase
      PRODUCT_SERVICE_URL: http://ms-catalog_app:4001/api/product
      PORT: 4004
      NODE_ENV: production
      REDIS_URL: redis://redis:6379
      CACHE_EXPIRY: 3600
      RETRY_ATTEMPTS: 3
      RETRY_DELAY: 1000
      REDIS_HOST: redis
      REDIS_PORT: 6379
      DB_POOL_MAX: 50
      DB_POOL_MIN: 10
      DB_POOL_IDLE: 30000
      DB_POOL_ACQUIRE: 60000
      DB_RETRY_ATTEMPTS: 5
      DB_RETRY_DELAY: 5000
      REDIS_RETRY_MULTIPLIER: 50
    depends_on:
      - postgres
      - redis
    volumes:
      - .:/app
    command: npm run dev
    networks:
      - microservicios-red
    labels:
      - "traefik.enable=true"  # Habilita Traefik para este contenedor
      - "traefik.http.routers.app.rule=Host(localhost)"  # Define la regla para enrutar el tráfico al contenedor
      - "traefik.http.services.app.loadbalancer.server.port=4004"  # Puerto de la aplicación dentro del contenedor

  # K6 Load Testing
  k6:
    image: loadimpact/k6
    container_name: ms-purchase_k6
    profiles: ["k6"]
    volumes:
      - ./k6:/k6
    entrypoint: ["k6", "run", "/k6/load-test.js"]
    depends_on:
      - app
    networks:
      - microservicios-red

volumes:
  postgres_data_purchase:

networks:
  microservicios-red:
    external: true